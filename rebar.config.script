%% -*- mode: erlang;erlang-indent-level: 2;indent-tabs-mode: nil -*-
%% vim: set ft=erlang ts=2 sw=2:

%% this code is not particularly nice.
%% the idea is to test for the presence of functions, in order to set
%% preprocessor flags, so that we can use the preprocessor to hide new
%% functions from old compilers.
%% "erl_opts" gets passed to the compiler.
%% "CONFIG" is a magic rebar thing.
%% The foldl takes a [{function(Predicate/0), atom(Macro)}].
%% If the Predicate is false, the Macro is passed to the compiler.
%% Predicate should test for presence of new functions, and the Macro
%% should be used to enable old functions. That way new functions are
%% enabled by default.

NOW =
fun() ->
    erlang:is_builtin(erlang, timestamp, 0) orelse {erl_opts, {d, 'USE_NOW'}}
end,

GITVSN =
fun() ->
    case os:cmd("(git describe | grep -Eo '^[0-9\.]+' | tr -d '\n') 2>/dev/null") of
      [] ->
        true;
      VSN ->
        {edoc_opts, {def, [{version, VSN}]}}
    end
end,

Funs = [NOW, GITVSN],

%% ================================================
KeyAppend = fun(_, Tag, E, [])           -> [{Tag, [E]}];
               (_, Tag, E, [{Tag, O}|T]) -> [{Tag, [E|O]}|T];
               (G, Tag, E, [H|T])        -> [H|G(G, Tag, E, T)]
            end,

Checker = fun(Fun, CFG) ->
              case Fun() of
                true -> CFG;
                {Key, Val} -> KeyAppend(KeyAppend, Key, Val, CFG)
              end
          end,

lists:foldl(Checker, CONFIG, Funs).
